<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.dantefung</groupId>
    <artifactId>jsr269-sample</artifactId>
    <packaging>jar</packaging>
    <version>1.0.0</version>
    <name>jsr269-sample</name>
    <url>http://maven.apache.org</url>

    <properties>
        <auto.service.version>1.0-rc4</auto.service.version>
        <javapoet.version>1.11.1</javapoet.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
        <!--
          A configuration/metadata generator for java.util.ServiceLoader-style service providers
          AutoWhat?
              Java annotation processors and other systems use java.util.ServiceLoader to register implementations of well-known types
              using META-INF metadata. However, it is easy for a developer to forget to update or correctly specify the service descriptors.
              AutoService generates this metadata for the developer, for any class annotated with @AutoService,
              avoiding typos, providing resistance to errors from refactoring, etc.
          自动帮你生成META-INF/services下的SPI要求的配置文件
      -->
        <dependency>
            <groupId>com.google.auto.service</groupId>
            <artifactId>auto-service</artifactId>
            <version>${auto.service.version}</version>
            <optional>true</optional>
        </dependency>
        <!--
        com.squareup:javapoet:1.11.1
        到此为止，我们唯一剩余的需求就是生成ShapeFactory类了。上一节中我们在FactoryProcessor类的init(ProcessingEnvironment processingEnvironment)方法中通过
        processingEnvironment拿到了Filer，并且我们也提到通过Filer可以用来编写文件，即可以通过Filer来生成我们所需要的ShapeFactory类。
        但是，直接使用Filer需要我们手动拼接类的代码，很可能一不小心写错了一个字母就致使所生成的类是无效的。
        因此，我们需要来认识一下JavaPoet这个库。 JavaPoet是square公司的一个开源框架JavaPoet，由Jake Wharton大神所编写。
        JavaPoet可以用对象的方式来帮助我们生成类代码，也就是我们能只要把要生成的类文件包装成一个对象，JavaPoet便可以自动帮我们生成类文件了。
        -->
        <dependency>
            <groupId> com.squareup</groupId>
            <artifactId>javapoet</artifactId>
            <version>${javapoet.version}</version>
            <optional>false</optional>
        </dependency>
    </dependencies>


    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>8</source>
                    <target>8</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
